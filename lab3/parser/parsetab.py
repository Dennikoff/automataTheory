
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND BEGIN BOOL CLBR COMMA CUCLBR CUOPBR DO ELSE END ENDSTR FALSE FUNCTION IF INT INTTYP LARGER LEFT LMS MOVE NEWLINE NOT OPBR OR RETURN RIGHT SET SHORT SHORTTYP SIZEOF SMALLER SQCLBR SQOPBR SUB THEN TRUE UNDEFINED VARIABLE VECTOROF VERTBAR WHILEprogram : statement_liststatement_list : statement_list single_statement\n                          | single_statement\n                          | NEWLINEsingle_statement : declaration ENDSTR NEWLINE\n                            | setting ENDSTR NEWLINE\n                            | if\n                            | dowhile\n                            | function\n                            | callfunc ENDSTR NEWLINE\n                            | cmd ENDSTR NEWLINE\n                            | ENDSTR NEWLINEdeclaration : type vartype : INT\n                | BOOL\n                | SHORT INT\n                | SHORTvar : variable\n               | setting\n               | var COMMA varsetting : variable SET exprexpr : variable\n                | const\n                | math_expr\n                | callfunc\n                | cmd\n                | OPBR expr CLBRsetting : variable SET setarrtype : vectorofvectorof : VECTOROF typesetarr : CUOPBR setarr CUCLBR\n                  | setarr COMMA setarr\n                  | CUOPBR exprarr CUCLBRexprarr : exprarr COMMA exprarr\n                   | exprconst : digit\n                 | bool\n                 | sizeofvariable : VARIABLE\n                    | VARIABLE indexindex : SQOPBR expr SQCLBR\n                 | index indexsizeof : SIZEOF OPBR type CLBR\n                  | SIZEOF OPBR variable CLBRbool : TRUE\n                | FALSE\n                | UNDEFINEDdigit : INTTYP\n                 | SHORTTYPmath_expr : expr SUB expr\n                     | expr ADD expr\n                     | expr VERTBAR expr LARGER\n                     | expr VERTBAR expr SMALLER\n                     | expr AND expr\n                     | expr OR expr\n                     | expr NOT AND expr\n                     | expr NOT OR exprcallfunc : VARIABLE OPBR varlist CLBRvarlist : variable\n                   | const\n                   | varlist COMMA varlistif : IF expr THEN NEWLINE statement_gr ELSE NEWLINE statement_gr\n              | IF expr THEN NEWLINE statement_gr ELSE ENDSTR NEWLINEif : IF expr THEN NEWLINE statement_gr error\n              | IF expr errorstatement_gr : BEGIN NEWLINE statement_list END NEWLINE\n                        | single_statementdowhile : DO NEWLINE statement_gr WHILE expr ENDSTR NEWLINEdowhile : DO NEWLINE errorfunction : FUNCTION VARIABLE OPBR arrtype CLBR NEWLINE statement_gr RETURN expr ENDSTR NEWLINEarrtype : type VARIABLE\n                   | arrtype COMMA arrtypecmd : MOVE\n               | MOVE dir\n               | RIGHT\n               | LEFT\n               | LMSdir : RIGHT\n               | LEFT'
    
_lr_action_items = {'NEWLINE':([0,6,16,29,31,32,33,74,86,111,130,135,137,138,142,150,],[4,30,56,66,67,68,69,99,111,4,139,141,143,144,147,151,]),'ENDSTR':([0,2,3,4,5,7,8,9,10,11,12,19,20,21,22,28,30,34,35,36,37,40,41,42,43,44,46,47,48,49,50,51,52,53,54,56,59,61,62,63,66,67,68,69,71,72,75,85,87,92,94,99,100,101,103,104,107,111,114,116,117,118,119,122,123,124,125,126,127,128,129,135,136,139,141,143,144,146,147,149,151,],[6,6,-3,-4,29,31,-7,-8,-9,32,33,-73,-75,-76,-77,-2,-12,-13,-18,-19,-39,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,6,-40,-74,-78,-79,-5,-6,-10,-11,-21,-28,-65,-69,-67,-42,-20,6,-50,-51,-54,-55,-27,6,-58,-41,-32,-31,-33,-52,-53,-56,-57,-43,-44,137,6,142,-64,6,6,-68,-66,-62,-63,150,-70,]),'IF':([0,2,3,4,8,9,10,28,30,56,66,67,68,69,75,85,87,99,111,129,136,139,141,143,144,146,147,151,],[15,15,-3,-4,-7,-8,-9,-2,-12,15,-5,-6,-10,-11,-65,-69,-67,15,15,15,-64,15,15,-68,-66,-62,-63,-70,]),'DO':([0,2,3,4,8,9,10,28,30,56,66,67,68,69,75,85,87,99,111,129,136,139,141,143,144,146,147,151,],[16,16,-3,-4,-7,-8,-9,-2,-12,16,-5,-6,-10,-11,-65,-69,-67,16,16,16,-64,16,16,-68,-66,-62,-63,-70,]),'FUNCTION':([0,2,3,4,8,9,10,28,30,56,66,67,68,69,75,85,87,99,111,129,136,139,141,143,144,146,147,151,],[17,17,-3,-4,-7,-8,-9,-2,-12,17,-5,-6,-10,-11,-65,-69,-67,17,17,17,-64,17,17,-68,-66,-62,-63,-70,]),'VARIABLE':([0,2,3,4,8,9,10,13,15,17,23,24,25,26,28,30,38,45,56,58,60,64,65,66,67,68,69,70,73,75,76,77,78,79,80,83,85,87,99,105,106,110,111,113,115,120,129,136,139,141,143,144,146,147,148,151,],[18,18,-3,-4,-7,-8,-9,37,46,57,-14,-15,-17,-29,-2,-12,46,46,18,37,46,-16,-30,-5,-6,-10,-11,37,46,-65,46,46,46,46,46,37,-69,-67,18,46,46,46,18,132,37,46,18,-64,18,18,-68,-66,-62,-63,46,-70,]),'MOVE':([0,2,3,4,8,9,10,15,28,30,38,45,56,60,66,67,68,69,73,75,76,77,78,79,80,85,87,99,105,106,110,111,120,129,136,139,141,143,144,146,147,148,151,],[19,19,-3,-4,-7,-8,-9,19,-2,-12,19,19,19,19,-5,-6,-10,-11,19,-65,19,19,19,19,19,-69,-67,19,19,19,19,19,19,19,-64,19,19,-68,-66,-62,-63,19,-70,]),'RIGHT':([0,2,3,4,8,9,10,15,19,28,30,38,45,56,60,66,67,68,69,73,75,76,77,78,79,80,85,87,99,105,106,110,111,120,129,136,139,141,143,144,146,147,148,151,],[20,20,-3,-4,-7,-8,-9,20,62,-2,-12,20,20,20,20,-5,-6,-10,-11,20,-65,20,20,20,20,20,-69,-67,20,20,20,20,20,20,20,-64,20,20,-68,-66,-62,-63,20,-70,]),'LEFT':([0,2,3,4,8,9,10,15,19,28,30,38,45,56,60,66,67,68,69,73,75,76,77,78,79,80,85,87,99,105,106,110,111,120,129,136,139,141,143,144,146,147,148,151,],[21,21,-3,-4,-7,-8,-9,21,63,-2,-12,21,21,21,21,-5,-6,-10,-11,21,-65,21,21,21,21,21,-69,-67,21,21,21,21,21,21,21,-64,21,21,-68,-66,-62,-63,21,-70,]),'LMS':([0,2,3,4,8,9,10,15,28,30,38,45,56,60,66,67,68,69,73,75,76,77,78,79,80,85,87,99,105,106,110,111,120,129,136,139,141,143,144,146,147,148,151,],[22,22,-3,-4,-7,-8,-9,22,-2,-12,22,22,22,22,-5,-6,-10,-11,22,-65,22,22,22,22,22,-69,-67,22,22,22,22,22,22,22,-64,22,22,-68,-66,-62,-63,22,-70,]),'INT':([0,2,3,4,8,9,10,25,27,28,30,56,66,67,68,69,75,83,85,87,88,99,111,129,131,136,139,141,143,144,146,147,151,],[23,23,-3,-4,-7,-8,-9,64,23,-2,-12,23,-5,-6,-10,-11,-65,23,-69,-67,23,23,23,23,23,-64,23,23,-68,-66,-62,-63,-70,]),'BOOL':([0,2,3,4,8,9,10,27,28,30,56,66,67,68,69,75,83,85,87,88,99,111,129,131,136,139,141,143,144,146,147,151,],[24,24,-3,-4,-7,-8,-9,24,-2,-12,24,-5,-6,-10,-11,-65,24,-69,-67,24,24,24,24,24,-64,24,24,-68,-66,-62,-63,-70,]),'SHORT':([0,2,3,4,8,9,10,27,28,30,56,66,67,68,69,75,83,85,87,88,99,111,129,131,136,139,141,143,144,146,147,151,],[25,25,-3,-4,-7,-8,-9,25,-2,-12,25,-5,-6,-10,-11,-65,25,-69,-67,25,25,25,25,25,-64,25,25,-68,-66,-62,-63,-70,]),'VECTOROF':([0,2,3,4,8,9,10,27,28,30,56,66,67,68,69,75,83,85,87,88,99,111,129,131,136,139,141,143,144,146,147,151,],[27,27,-3,-4,-7,-8,-9,27,-2,-12,27,-5,-6,-10,-11,-65,27,-69,-67,27,27,27,27,27,-64,27,27,-68,-66,-62,-63,-70,]),'$end':([1,2,3,4,8,9,10,28,30,66,67,68,69,75,85,87,136,143,144,146,147,151,],[0,-1,-3,-4,-7,-8,-9,-2,-12,-5,-6,-10,-11,-65,-69,-67,-64,-68,-66,-62,-63,-70,]),'END':([3,4,8,9,10,28,30,66,67,68,69,75,85,87,129,136,143,144,146,147,151,],[-3,-4,-7,-8,-9,-2,-12,-5,-6,-10,-11,-65,-69,-67,138,-64,-68,-66,-62,-63,-70,]),'WHILE':([8,9,10,30,66,67,68,69,75,84,85,87,136,143,144,146,147,151,],[-7,-8,-9,-12,-5,-6,-10,-11,-65,110,-69,-67,-64,-68,-66,-62,-63,-70,]),'ELSE':([8,9,10,30,66,67,68,69,75,85,87,121,136,143,144,146,147,151,],[-7,-8,-9,-12,-5,-6,-10,-11,-65,-69,-67,135,-64,-68,-66,-62,-63,-70,]),'error':([8,9,10,19,20,21,22,30,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,56,59,61,62,63,66,67,68,69,75,85,87,92,100,101,103,104,107,114,116,121,122,123,124,125,126,127,136,143,144,146,147,151,],[-7,-8,-9,-73,-75,-76,-77,-12,75,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,85,-40,-74,-78,-79,-5,-6,-10,-11,-65,-69,-67,-42,-50,-51,-54,-55,-27,-58,-41,136,-52,-53,-56,-57,-43,-44,-64,-68,-66,-62,-63,-70,]),'RETURN':([8,9,10,30,66,67,68,69,75,85,87,136,143,144,145,146,147,151,],[-7,-8,-9,-12,-5,-6,-10,-11,-65,-69,-67,-64,-68,-66,148,-62,-63,-70,]),'SET':([14,18,35,37,59,92,116,],[38,-39,38,-39,-40,-42,-41,]),'OPBR':([15,18,38,45,46,55,57,60,73,76,77,78,79,80,105,106,110,120,148,],[45,58,45,45,58,83,88,45,45,45,45,45,45,45,45,45,45,45,45,]),'INTTYP':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'SHORTTYP':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'TRUE':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'FALSE':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'UNDEFINED':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'SIZEOF':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'SQOPBR':([18,37,46,59,92,116,],[60,60,60,60,60,-41,]),'THEN':([19,20,21,22,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,92,100,101,103,104,107,114,116,122,123,124,125,126,127,],[-73,-75,-76,-77,74,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,-42,-50,-51,-54,-55,-27,-58,-41,-52,-53,-56,-57,-43,-44,]),'SUB':([19,20,21,22,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,71,82,92,93,98,100,101,102,103,104,107,114,116,122,123,124,125,126,127,128,149,],[-73,-75,-76,-77,76,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,76,76,-42,76,76,76,76,76,76,76,-27,-58,-41,-52,-53,76,76,-43,-44,76,76,]),'ADD':([19,20,21,22,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,71,82,92,93,98,100,101,102,103,104,107,114,116,122,123,124,125,126,127,128,149,],[-73,-75,-76,-77,77,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,77,77,-42,77,77,77,77,77,77,77,-27,-58,-41,-52,-53,77,77,-43,-44,77,77,]),'VERTBAR':([19,20,21,22,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,71,82,92,93,98,100,101,102,103,104,107,114,116,122,123,124,125,126,127,128,149,],[-73,-75,-76,-77,78,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,78,78,-42,78,78,78,78,78,78,78,-27,-58,-41,-52,-53,78,78,-43,-44,78,78,]),'AND':([19,20,21,22,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,71,81,82,92,93,98,100,101,102,103,104,107,114,116,122,123,124,125,126,127,128,149,],[-73,-75,-76,-77,79,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,79,105,79,-42,79,79,79,79,79,79,79,-27,-58,-41,-52,-53,79,79,-43,-44,79,79,]),'OR':([19,20,21,22,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,71,81,82,92,93,98,100,101,102,103,104,107,114,116,122,123,124,125,126,127,128,149,],[-73,-75,-76,-77,80,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,80,106,80,-42,80,80,80,80,80,80,80,-27,-58,-41,-52,-53,80,80,-43,-44,80,80,]),'NOT':([19,20,21,22,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,71,82,92,93,98,100,101,102,103,104,107,114,116,122,123,124,125,126,127,128,149,],[-73,-75,-76,-77,81,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,81,81,-42,81,81,81,81,81,81,81,-27,-58,-41,-52,-53,81,81,-43,-44,81,81,]),'COMMA':([19,20,21,22,34,35,36,37,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,71,72,89,90,91,92,94,96,97,98,100,101,103,104,107,112,114,116,117,118,119,122,123,124,125,126,127,132,133,134,140,],[-73,-75,-76,-77,70,-18,-19,-39,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,-21,95,115,-59,-60,-42,70,95,120,-35,-50,-51,-54,-55,-27,131,-58,-41,95,-31,-33,-52,-53,-56,-57,-43,-44,-71,115,120,131,]),'CLBR':([19,20,21,22,23,24,25,26,37,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,64,65,82,89,90,91,92,100,101,103,104,107,108,109,112,114,116,122,123,124,125,126,127,132,133,140,],[-73,-75,-76,-77,-14,-15,-17,-29,-39,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,-16,-30,107,114,-59,-60,-42,-50,-51,-54,-55,-27,126,127,130,-58,-41,-52,-53,-56,-57,-43,-44,-71,-61,-72,]),'SQCLBR':([19,20,21,22,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,92,93,100,101,103,104,107,114,116,122,123,124,125,126,127,],[-73,-75,-76,-77,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,-42,116,-50,-51,-54,-55,-27,-58,-41,-52,-53,-56,-57,-43,-44,]),'CUCLBR':([19,20,21,22,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,92,96,97,98,100,101,103,104,107,114,116,117,118,119,122,123,124,125,126,127,134,],[-73,-75,-76,-77,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,-42,118,119,-35,-50,-51,-54,-55,-27,-58,-41,-32,-31,-33,-52,-53,-56,-57,-43,-44,-34,]),'LARGER':([19,20,21,22,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,92,100,101,102,103,104,107,114,116,122,123,124,125,126,127,],[-73,-75,-76,-77,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,-42,-50,-51,122,-54,-55,-27,-58,-41,-52,-53,-56,-57,-43,-44,]),'SMALLER':([19,20,21,22,40,41,42,43,44,46,47,48,49,50,51,52,53,54,59,61,62,63,92,100,101,102,103,104,107,114,116,122,123,124,125,126,127,],[-73,-75,-76,-77,-22,-23,-24,-25,-26,-39,-36,-37,-38,-48,-49,-45,-46,-47,-40,-74,-78,-79,-42,-50,-51,123,-54,-55,-27,-58,-41,-52,-53,-56,-57,-43,-44,]),'CUOPBR':([38,73,95,],[73,73,73,]),'BEGIN':([56,99,139,141,],[86,86,86,86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,111,],[2,129,]),'single_statement':([0,2,56,99,111,129,139,141,],[3,28,87,87,3,28,87,87,]),'declaration':([0,2,56,99,111,129,139,141,],[5,5,5,5,5,5,5,5,]),'setting':([0,2,13,56,70,99,111,129,139,141,],[7,7,36,7,36,7,7,7,7,7,]),'if':([0,2,56,99,111,129,139,141,],[8,8,8,8,8,8,8,8,]),'dowhile':([0,2,56,99,111,129,139,141,],[9,9,9,9,9,9,9,9,]),'function':([0,2,56,99,111,129,139,141,],[10,10,10,10,10,10,10,10,]),'callfunc':([0,2,15,38,45,56,60,73,76,77,78,79,80,99,105,106,110,111,120,129,139,141,148,],[11,11,43,43,43,11,43,43,43,43,43,43,43,11,43,43,43,11,43,11,11,11,43,]),'cmd':([0,2,15,38,45,56,60,73,76,77,78,79,80,99,105,106,110,111,120,129,139,141,148,],[12,12,44,44,44,12,44,44,44,44,44,44,44,12,44,44,44,12,44,12,12,12,44,]),'type':([0,2,27,56,83,88,99,111,129,131,139,141,],[13,13,65,13,108,113,13,13,13,113,13,13,]),'variable':([0,2,13,15,38,45,56,58,60,70,73,76,77,78,79,80,83,99,105,106,110,111,115,120,129,139,141,148,],[14,14,35,40,40,40,14,90,40,35,40,40,40,40,40,40,109,14,40,40,40,14,90,40,14,14,14,40,]),'vectorof':([0,2,27,56,83,88,99,111,129,131,139,141,],[26,26,26,26,26,26,26,26,26,26,26,26,]),'var':([13,70,],[34,94,]),'expr':([15,38,45,60,73,76,77,78,79,80,105,106,110,120,148,],[39,71,82,93,98,100,101,102,103,104,124,125,128,98,149,]),'const':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[41,41,41,91,41,41,41,41,41,41,41,41,41,41,91,41,41,]),'math_expr':([15,38,45,60,73,76,77,78,79,80,105,106,110,120,148,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'digit':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'bool':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'sizeof':([15,38,45,58,60,73,76,77,78,79,80,105,106,110,115,120,148,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'index':([18,37,46,59,92,],[59,59,59,92,92,]),'dir':([19,],[61,]),'setarr':([38,73,95,],[72,96,117,]),'statement_gr':([56,99,139,141,],[84,121,145,146,]),'varlist':([58,115,],[89,133,]),'exprarr':([73,120,],[97,134,]),'arrtype':([88,131,],[112,140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',23),
  ('statement_list -> statement_list single_statement','statement_list',2,'p_statement_list','Parser.py',27),
  ('statement_list -> single_statement','statement_list',1,'p_statement_list','Parser.py',28),
  ('statement_list -> NEWLINE','statement_list',1,'p_statement_list','Parser.py',29),
  ('single_statement -> declaration ENDSTR NEWLINE','single_statement',3,'p_single_statement','Parser.py',34),
  ('single_statement -> setting ENDSTR NEWLINE','single_statement',3,'p_single_statement','Parser.py',35),
  ('single_statement -> if','single_statement',1,'p_single_statement','Parser.py',36),
  ('single_statement -> dowhile','single_statement',1,'p_single_statement','Parser.py',37),
  ('single_statement -> function','single_statement',1,'p_single_statement','Parser.py',38),
  ('single_statement -> callfunc ENDSTR NEWLINE','single_statement',3,'p_single_statement','Parser.py',39),
  ('single_statement -> cmd ENDSTR NEWLINE','single_statement',3,'p_single_statement','Parser.py',40),
  ('single_statement -> ENDSTR NEWLINE','single_statement',2,'p_single_statement','Parser.py',41),
  ('declaration -> type var','declaration',2,'p_declaration','Parser.py',45),
  ('type -> INT','type',1,'p_type','Parser.py',49),
  ('type -> BOOL','type',1,'p_type','Parser.py',50),
  ('type -> SHORT INT','type',2,'p_type','Parser.py',51),
  ('type -> SHORT','type',1,'p_type','Parser.py',52),
  ('var -> variable','var',1,'p_var','Parser.py',56),
  ('var -> setting','var',1,'p_var','Parser.py',57),
  ('var -> var COMMA var','var',3,'p_var','Parser.py',58),
  ('setting -> variable SET expr','setting',3,'p_setting','Parser.py',62),
  ('expr -> variable','expr',1,'p_expr','Parser.py',66),
  ('expr -> const','expr',1,'p_expr','Parser.py',67),
  ('expr -> math_expr','expr',1,'p_expr','Parser.py',68),
  ('expr -> callfunc','expr',1,'p_expr','Parser.py',69),
  ('expr -> cmd','expr',1,'p_expr','Parser.py',70),
  ('expr -> OPBR expr CLBR','expr',3,'p_expr','Parser.py',71),
  ('setting -> variable SET setarr','setting',3,'p_setting_arr','Parser.py',75),
  ('type -> vectorof','type',1,'p_type_arr','Parser.py',79),
  ('vectorof -> VECTOROF type','vectorof',2,'p_vectorof','Parser.py',83),
  ('setarr -> CUOPBR setarr CUCLBR','setarr',3,'p_setarr','Parser.py',87),
  ('setarr -> setarr COMMA setarr','setarr',3,'p_setarr','Parser.py',88),
  ('setarr -> CUOPBR exprarr CUCLBR','setarr',3,'p_setarr','Parser.py',89),
  ('exprarr -> exprarr COMMA exprarr','exprarr',3,'p_exprarr','Parser.py',93),
  ('exprarr -> expr','exprarr',1,'p_exprarr','Parser.py',94),
  ('const -> digit','const',1,'p_const','Parser.py',98),
  ('const -> bool','const',1,'p_const','Parser.py',99),
  ('const -> sizeof','const',1,'p_const','Parser.py',100),
  ('variable -> VARIABLE','variable',1,'p_variable','Parser.py',104),
  ('variable -> VARIABLE index','variable',2,'p_variable','Parser.py',105),
  ('index -> SQOPBR expr SQCLBR','index',3,'p_index','Parser.py',109),
  ('index -> index index','index',2,'p_index','Parser.py',110),
  ('sizeof -> SIZEOF OPBR type CLBR','sizeof',4,'p_sizeof','Parser.py',114),
  ('sizeof -> SIZEOF OPBR variable CLBR','sizeof',4,'p_sizeof','Parser.py',115),
  ('bool -> TRUE','bool',1,'p_bool','Parser.py',119),
  ('bool -> FALSE','bool',1,'p_bool','Parser.py',120),
  ('bool -> UNDEFINED','bool',1,'p_bool','Parser.py',121),
  ('digit -> INTTYP','digit',1,'p_digit','Parser.py',125),
  ('digit -> SHORTTYP','digit',1,'p_digit','Parser.py',126),
  ('math_expr -> expr SUB expr','math_expr',3,'p_math_expr','Parser.py',130),
  ('math_expr -> expr ADD expr','math_expr',3,'p_math_expr','Parser.py',131),
  ('math_expr -> expr VERTBAR expr LARGER','math_expr',4,'p_math_expr','Parser.py',132),
  ('math_expr -> expr VERTBAR expr SMALLER','math_expr',4,'p_math_expr','Parser.py',133),
  ('math_expr -> expr AND expr','math_expr',3,'p_math_expr','Parser.py',134),
  ('math_expr -> expr OR expr','math_expr',3,'p_math_expr','Parser.py',135),
  ('math_expr -> expr NOT AND expr','math_expr',4,'p_math_expr','Parser.py',136),
  ('math_expr -> expr NOT OR expr','math_expr',4,'p_math_expr','Parser.py',137),
  ('callfunc -> VARIABLE OPBR varlist CLBR','callfunc',4,'p_callfunc','Parser.py',141),
  ('varlist -> variable','varlist',1,'p_varlist','Parser.py',145),
  ('varlist -> const','varlist',1,'p_varlist','Parser.py',146),
  ('varlist -> varlist COMMA varlist','varlist',3,'p_varlist','Parser.py',147),
  ('if -> IF expr THEN NEWLINE statement_gr ELSE NEWLINE statement_gr','if',8,'p_if','Parser.py',151),
  ('if -> IF expr THEN NEWLINE statement_gr ELSE ENDSTR NEWLINE','if',8,'p_if','Parser.py',152),
  ('if -> IF expr THEN NEWLINE statement_gr error','if',6,'p_iferr','Parser.py',156),
  ('if -> IF expr error','if',3,'p_iferr','Parser.py',157),
  ('statement_gr -> BEGIN NEWLINE statement_list END NEWLINE','statement_gr',5,'p_statement_gr','Parser.py',161),
  ('statement_gr -> single_statement','statement_gr',1,'p_statement_gr','Parser.py',162),
  ('dowhile -> DO NEWLINE statement_gr WHILE expr ENDSTR NEWLINE','dowhile',7,'p_dowhile','Parser.py',166),
  ('dowhile -> DO NEWLINE error','dowhile',3,'p_dowhileerr','Parser.py',170),
  ('function -> FUNCTION VARIABLE OPBR arrtype CLBR NEWLINE statement_gr RETURN expr ENDSTR NEWLINE','function',11,'p_function','Parser.py',175),
  ('arrtype -> type VARIABLE','arrtype',2,'p_arrtype','Parser.py',181),
  ('arrtype -> arrtype COMMA arrtype','arrtype',3,'p_arrtype','Parser.py',182),
  ('cmd -> MOVE','cmd',1,'p_cmd','Parser.py',186),
  ('cmd -> MOVE dir','cmd',2,'p_cmd','Parser.py',187),
  ('cmd -> RIGHT','cmd',1,'p_cmd','Parser.py',188),
  ('cmd -> LEFT','cmd',1,'p_cmd','Parser.py',189),
  ('cmd -> LMS','cmd',1,'p_cmd','Parser.py',190),
  ('dir -> RIGHT','dir',1,'p_dir','Parser.py',194),
  ('dir -> LEFT','dir',1,'p_dir','Parser.py',195),
]
