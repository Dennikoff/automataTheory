# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AppClass.sm

import statemap


class AppClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Colon(self, fsm):
        self.Default(fsm)

    def Digit(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Letter(self, fsm):
        self.Default(fsm)

    def Space(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(AppClassState):

    def Unknown(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
            ctxt.clearApp()
        finally:
            fsm.setState(Map1.Start)
            fsm.getState().Entry(fsm)

class Map1_Start(Map1_Default):

    def Colon(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSubStr()
        finally:
            fsm.setState(Map1.B)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Start)
        fsm.getState().Entry(fsm)

class Map1_B(Map1_Default):

    def Colon(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addToList()
            ctxt.clearSubStr()
        finally:
            fsm.setState(Map1.D)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSubStr()
        finally:
            fsm.setState(Map1.B)
            fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSubStr()
        finally:
            fsm.setState(Map1.B)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.C)
        fsm.getState().Entry(fsm)

class Map1_C(Map1_Default):

    def Colon(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addToList()
            ctxt.clearSubStr()
        finally:
            fsm.setState(Map1.D)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.C)
        fsm.getState().Entry(fsm)

class Map1_D(Map1_Default):

    def Colon(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
            ctxt.fillSetAndDict()
            ctxt.clearApp()
        finally:
            fsm.setState(Map1.Start)
            fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSubStr()
        finally:
            fsm.setState(Map1.E)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.D)
        fsm.getState().Entry(fsm)

class Map1_E(Map1_Default):

    def Colon(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSubStr()
        finally:
            fsm.setState(Map1.E)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.InTheList() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Acceptable()
                ctxt.addToList()
                ctxt.fillSetAndDict()
                ctxt.clearApp()
            finally:
                fsm.setState(Map1.Start)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.EOS(self, fsm)
        
    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSubStr()
        finally:
            fsm.setState(Map1.E)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.InTheList() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.addToList()
                ctxt.clearSubStr()
            finally:
                fsm.setState(Map1.D)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)


class Map1_Error(Map1_Default):

    def Colon(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

class Map1_Final(Map1_Default):
    pass

class Map1(object):

    Start = Map1_Start('Map1.Start', 0)
    B = Map1_B('Map1.B', 1)
    C = Map1_C('Map1.C', 2)
    D = Map1_D('Map1.D', 3)
    E = Map1_E('Map1.E', 4)
    Error = Map1_Error('Map1.Error', 5)
    Final = Map1_Final('Map1.Final', 6)
    Default = Map1_Default('Map1.Default', -1)

class AppClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
